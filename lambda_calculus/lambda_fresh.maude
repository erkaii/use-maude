mod LAMBDA-FRESH{N :: NAME} is protecting FRESH{N} .
	sorts Lambda{N} Sub{N} .
	subsort N$Name < Lambda{N} . *** subsort of names
	op \_._ : N$Name Lambda{N} -> Lambda{N} [ctor] . *** lambda abstraction
	op __ : Lambda{N} Lambda{N} -> Lambda{N} [ctor gather (E e)] . *** application
	op [_:=_] : N$Name Lambda{N} -> Sub{N} [frozen] . *** substitution
	op __ : Sub{N} Lambda{N} -> Lambda{N} [frozen] . *** instantiation
	op fn : Lambda{N} -> Set{N} [frozen] . *** free names

	vars X Y Z : N$Name . vars U V W : Lambda{N} .

	eq fn(X) = X .
	eq fn(U V) = fn(U),fn(V) .
	eq fn(\ X . U) = fn(U) \ X .

	eq [X := U] Z = if X .=. Z then U else Z fi .
	eq [X := U] (V W) = ([X := U] V) ([X := U] W) .
	eq [X := U] \ X . V = \ X . V .
	ceq [X := U] \ Y . V = \ Y . ([X := U] V) if X .=. Y = false /\ Y in fn(U) = false .
	ceq [X := U](\ Y . V) = \ Z . [X := U][Y := Z]V
		if X .=. Y = false /\ Y in fn(U) = true /\ Z := fresh(fn(U),fn(V)) .

	ceq [alpha] : \ X . U = \ Y .([X := Y] U) if Y in fn(U) = false [nonexec] .

	rl [beta] : (\ X . U) V => [X := V] U .
endm
