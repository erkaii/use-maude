mod ALPHA-CAN{N :: NAME} is
	protecting LAMBDA-FRESH0{N} .
	sort Pred .
	op tt : -> Pred .
	op alpha-eq : Lambda0{N} Lambda0{N} -> Pred . *** lambda-equality predicate
	op can : Lambda0{N} -> Lambda0{N} . *** alpha-canonical form of combinators
	op can-aux : Lambda{N} Nat -> Lambda{N} . *** auxiliary function

	vars X Y : N$Name .	var U V : Lambda{N} . vars U0 V0 : Lambda0{N} . var n : Nat .

	eq can(U0) = can-aux(U0,0) .
	eq can-aux(\ X . U,n) = \ j(n) . ([X := j(n)] can-aux(U,n + 1)) .
	eq can-aux((U V),n) = (can-aux(U,n)) (can-aux(V,n)) .
	eq can-aux(X,n) = X .

	crl [alpha-eq] : alpha-eq(U0,V0) => tt if can(U0) = can(V0) .
endm
