mod KANELLAKIS-SMOLKA is
  sorts State Trans TransSet Block Partition .

  subsort State < Block < Partition .
  subsort Trans < TransSet .

  --- State and Block definitions
  ops s1 s2 s3 s4 : -> State [ctor] .
  op noneBlock : -> Block [ctor] .
  op __ : Block Block -> Block [ctor assoc comm id: noneBlock] .

  --- Define set operation for Block
  op _in_ : State Block -> Bool .
  eq s in (s B) = true .
  eq s in B = false [owise] .

  op _inter_ : Block Block -> Block [assoc comm] .
  eq noneBlock inter B = noneBlock .
  eq (s B1) inter B2 = if s in B2 then (s (B1 inter B2)) else (B1 inter B2) fi .

  op _diff_ : Block Block -> Block .
  eq noneBlock diff B = noneBlock .
  eq (s B1) diff B2 = if s in B2 then (B1 diff B2) else (s (B1 diff B2)) fi .

  --- Partition definition
  op _;_ : Partition Partition -> Partition [ctor assoc comm id: noneBlock] .

  --- Trans definition
  op _~>_ : State State -> Trans [ctor] .
  op noneTrans : -> TransSet [ctor] .
  op __ : TransSet TransSet -> TransSet [ctor assoc comm id: noneTrans] .

  vars s s' t t' : State .
  vars B B1 B2 S' B' : Block .
  var tr : Trans .
  var TS : TransSet .
  vars P P' U : Partition .

  --- Initialization
  op transSet : -> TransSet .
  eq transSet = (s1 ~> s2) (s2 ~> s3) (s3 ~> s1) .
  op S : -> Block .
  eq S = (s1 s2 s3 s4) .

  op pi0 : -> Partition .
  eq pi0 = s1 s2 s3 s4 .

  --- Transition membership check: is there s ~> t with t in B
  op existsTransTo : State Block TransSet -> Bool .
  eq existsTransTo(s, noneBlock, TS) = false .
  eq existsTransTo(s, (s' B2), TS) = if isInTransSet((s ~> s'), TS) then true else existsTransTo(s, B2, TS) fi .

  op isInTransSet : Trans TransSet -> Bool .

  eq isInTransSet(s ~> t, noneTrans) = false .
  eq isInTransSet(s ~> t, (s ~> t) TS) = true .
  ceq isInTransSet(s ~> t, (s' ~> t') TS) = isInTransSet((s ~> t), TS) if s =/= s' or t =/= t' .

  --- Compute S' := {s in S | ∃t in B. s → t}
  op computeSPrime : Block -> Block .
  eq computeSPrime(B) = computeSPrimeHelper(S, B) .

  op computeSPrimeHelper : Block Block -> Block .
  eq computeSPrimeHelper(noneBlock, B) = noneBlock .
  eq computeSPrimeHelper(B, noneBlock) = noneBlock .
  eq computeSPrimeHelper((s B1), B) = if existsTransTo(s, B, transSet) then s computeSPrimeHelper(B1, B) else computeSPrimeHelper(B1, B) fi .
  
  --- Main algorithm
  op ReduceU : Partition Partition -> Partition .
  eq ReduceU(noneBlock, P) = P .
  eq ReduceU((B ; U), P) = ReduceU(IncreaseU(U, P, computeSPrime(B)), IncreaseP(P, P, computeSPrime(B))) .

  op IncreaseU : Partition Partition Block -> Partition .
  eq IncreaseU(U, P, noneBlock) = U .
  eq IncreaseU(U, noneBlock, S') = U .
  eq IncreaseU(U, B', S') = if B' inter S' =/= noneBlock and B' inter S' =/= B'
    then IncreaseU((U ; (B' inter S') ; (B' diff S')), noneBlock, S') 
    else IncreaseU(U, noneBlock, S') fi .
  ceq IncreaseU(U, (B' ; P), S') = if B' inter S' =/= noneBlock and B' inter S' =/= B'
    then IncreaseU((U ; (B' inter S') ; (B' diff S')), P, S') 
    else IncreaseU(U, P, S') fi if B' =/= noneBlock .
  
  op IncreaseP : Partition Partition Block -> Partition .
  eq IncreaseP(P, P', noneBlock) = P .
  eq IncreaseP(P, noneBlock, S') = P .
  eq IncreaseP((B ; P), B', S') = if B' inter S' =/= noneBlock and B' inter S' =/= B'
    then IncreaseP((P ; (B' inter S') ; (B' diff S')), noneBlock, S')
	else IncreaseP((B ; P), noneBlock, S') fi .
  ceq IncreaseP((B' ; P), (B' ; P'), S') = if B' inter S' =/= noneBlock and B' inter S' =/= B'
    then IncreaseP((P ; (B' inter S'); (B' diff S')), P', S')
    else IncreaseP((B' ; P), P', S') fi if B' =/= noneBlock [print "P=" P " B'=" B' " P'=" P'] .
endm

